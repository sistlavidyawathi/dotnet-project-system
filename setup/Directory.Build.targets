<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information. -->
<Project>

  <Import Project="..\Directory.Build.targets" />

  <!--
    Defining this target will disable the new SDK behavior of implicit transitive project
    references. This is a fine feature in general but the current implementation breaks VSIX 
    construction by including a number of projects that should not be included. 
    https://github.com/dotnet/sdk/issues/1366
  -->
  <Target Name="IncludeTransitiveProjectReferences" >
  </Target>

  <!-- Adds the appropriate vsix files for signing. -->
  <Target Name="AddVsixForSigning" DependsOnTargets="$(AddVsixForSigningDependsOn)" BeforeTargets="SignFiles">
    <Copy SourceFiles="$(VisualStudioSetupInsertionPath)$(AssemblyName).vsix" DestinationFolder="$(OutDir)" />
    <ItemGroup>
      <FilesToSign Include="$(OutDir)$(AssemblyName).vsix">
        <Authenticode>VsixSHA2</Authenticode>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <!--
    Updates insertion manifests (json) for creating the vsman files for insertion to include the SPDX SBOM json.
    Technically, this should be AfterTargets="$(AddVsixForSigningDependsOn)" as that value (target) indicates when VSIX packaging has completed.
    Doing it as AfterTargets="AddVsixForSigning" unnecessarily binds the SBOM process to signing. But there is not currently a scenario where we wouldn't sign and generate an SBOM.
  -->
  <Target Name="UpdateManifestJsonForSbom" AfterTargets="AddVsixForSigning">
    <Exec ContinueOnError="false" Command="powershell -NonInteractive -NoLogo -NoProfile -ExecutionPolicy Unrestricted -Command &quot;. $(RepoRoot)build\script\UpdateManifestJsonForSbom.ps1 -manifestJsonPath '$(VisualStudioSetupInsertionPath)$(ManifestJsonName).json' -sbomMetadataPath '$(ArtifactsBinDir)spdx_2.2\manifest.spdx.json'&quot;" />
  </Target>

  <!-- Copies the vsix files after they've been signed to the different output folders. -->
  <Target Name="CopyVsixAfterSigning" DependsOnTargets="AddVsixForSigning" AfterTargets="SignFiles">
    <Copy SourceFiles="$(OutDir)$(AssemblyName).vsix" DestinationFolder="$(VisualStudioSetupInsertionPath)" />
    <Copy SourceFiles="$(OutDir)$(AssemblyName).vsix" DestinationFolder="$(VisualStudioSetupOutputPath)" />
  </Target>

</Project>
